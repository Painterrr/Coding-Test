import java.io.*;
import java.util.*;

public class Main {
	static ArrayList<int[]> list;
	static int[][] matrix;
	static boolean[][] visited;
	static int[][] route;
	static int n, m;
	static int[] dy = { -1, 1, 0, 0 };
	static int[] dx = { 0, 0, -1, 1 };
	static int answer;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());

		matrix = new int[n + 1][n + 1];
		visited = new boolean[n + 1][n + 1];
		route = new int[m][2];

		for (int i = 1; i <= n; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= n; j++) {
				matrix[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < 2; j++) {
				route[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		list = new ArrayList<>();
		list.add(new int[] { route[0][0], route[0][1] });
		visited[route[0][0]][route[0][1]] = true;
		dfs(route[0][0], route[0][1], list);

		System.out.println(answer);
	}

	public static boolean containRoute(ArrayList<int[]> list) {
		int size = list.size();
		int idx = 0;

		for (int i = 0; i < size; i++) {
			int[] now = list.get(i);
						
			if (now[0] == route[idx][0] && now[1] == route[idx][1])
				idx++;
		}

		if (idx == m)
			return true;
		else
			return false;
	}

	public static void dfs(int nowY, int nowX, ArrayList<int[]> list) {
		if (nowY == route[m - 1][0] && nowX == route[m - 1][1]) {
			if (containRoute(list))
				answer++;
		}

		for (int i = 0; i < 4; i++) {
			int y = nowY + dy[i];
			int x = nowX + dx[i];

			if (0 < y && y <= n && 0 < x && x <= n) {
				if (!visited[y][x] && matrix[y][x] != 1) {
					visited[y][x] = true;
					list.add(new int[] { y, x });
					
					dfs(y, x, list);
					
					list.remove(list.size() - 1);
					visited[y][x] = false;
				}
			}
		}
	}
}
