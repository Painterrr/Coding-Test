import java.util.*;

class Solution {
    static int[][] visited;
    
    public int solution(int[][] maps) {
        int answer = -1;
        visited = maps;
        
        answer = bfs(0, 0, maps);
        
        return answer;
    }
    
    public int bfs(int x, int y, int[][] maps) {
        Queue<int[]> q = new ArrayDeque<>();
        int n = maps.length;
        int m = maps[0].length;
        int[] dx = new int[] {-1, 0, 1, 0};
        int[] dy = new int[] {0, 1, 0, -1};
        
        q.add(new int[] {x, y, 1});
        visited[x][y] = 0;
        
        while (!q.isEmpty()) {
            int[] now = q.poll();

            if (now[0] == n - 1 && now[1] == m - 1)
                return now[2];
            
            for (int i = 0; i < 4; i++) {
                int nx = now[0] + dx[i];
                int ny = now[1] + dy[i];
                
                if (0 > nx || nx >= n || 0 > ny || ny >= m) {
                    continue;
                }
                
                if (maps[nx][ny] == 1 && visited[nx][ny] == 1) {
                    q.add(new int[] {nx, ny, now[2] + 1});
                    visited[nx][ny] = 0;
                }
            }
        }
        
        return -1;
    }
}
