import java.util.*;
import java.io.*;

public class Solution_연속_펄스_부분_수열의_합 {
	public static void main(String[] args) {
		int[] sequence = { 2, 3, -6, 1, 3, -1, 2, 4 };
		// 10

		solution(sequence);
	}

	public static long solution(int[] sequence) {
		long answer = Long.MIN_VALUE;
		int len = sequence.length;
		long[] beginPlus = new long[len + 1];
		long[] beginMinus = new long[len + 1];

		long one = 1;
		long plusSum = 0;
		long minusSum = 0;
		// 구간 합
		for (int i = 0; i < len; i++) {
			plusSum += sequence[i] * one;
			beginPlus[i + 1] = plusSum;
			one *= -1;
			minusSum += sequence[i] * one;
			beginMinus[i + 1] = minusSum;
		}
		
		answer = getResult(sequence, beginPlus, answer);
		answer = getResult(sequence, beginMinus, answer);

		return answer;
	}

	private static long getResult(int[] sequence, long[] arr, long res) {
		int begin = 0;
		int end = 1;
		int len = sequence.length;
		
		while(end <= len) {
			long sum = arr[end] - arr[begin];
			// 구간 합이 양수며 결과 갱신 후 end++
			if(sum >= 0) {
				res = Math.max(res, sum);
				end++;
			}
			// 구간 합이 음수면 begin, end를 다음 인덱스로 초기화
			else {
				begin = end;
				end++;
			}
		}

		return res;
	}
}
