import java.util.*;

class Solution {
    public int solution(String begin, String target, String[] words) {
        int answer = 0;
        boolean[] visited = new boolean[words.length];
        
        if (canFind(target, words)) {
            Queue<Word> q = new ArrayDeque<>();
            q.add(new Word(0, begin));
            
            while (!q.isEmpty()) {
                Word now = q.poll();

                if (now.word.equals(target))
                    return now.step;
                
                for (int i = 0; i < words.length; i++) {
                    if (!visited[i] && differOne(now.word, words[i])) {
                        q.add(new Word(now.step + 1, words[i]));
                        visited[i] = true;
                    }
                }
            }
        }
        
        return answer;
    }
    
    public boolean differOne(String now, String word) {
        int cnt = 0;
        
        for (int i = 0; i < now.length(); i++) {
            if (now.charAt(i) != word.charAt(i)) {
                cnt++;
            }
        }
        
        if (cnt == 1) {
            return true;
        } else {
            return false;
        }
    }
    
    public boolean canFind(String target, String[] words) {
        for (int i = 0; i < words.length; i++) {
            if (words[i].equals(target))
                return true;
        }
        
        return false;
    }
}

class Word {
    int step;
    String word;
    
    public Word (int step, String word) {
        this.step = step;
        this.word = word;
    }
}
