import java.util.*;

class Solution {
    static int[][] matrix;
    static boolean[][] visited;
    static int cnt;
    static int y;
    static int x;
    static int[] dy = {-1, 0, 1, 0};
    static int[] dx = {0, 1, 0, -1};
    
    public int[] solution(String[] maps) {
        int[] answer = new int[] {-1};
        y = maps.length;
        x = maps[1].length();
        List<Integer> list = new ArrayList<>();
        
        matrix = new int[y][x];
        visited = new boolean[y][x];
        
        for (int i = 0; i < y; i++) {
            for (int j = 0; j < x; j++) {
                String now = String.valueOf(maps[i].charAt(j));
                
                if (now .equals("X")) {
                    matrix[i][j] = 0;
                } else {
                    matrix[i][j] = Integer.parseInt(now);
                }
            }
        }
        
        for (int i = 0; i < y; i++) {
            for (int j = 0; j < x; j++) {
                if (matrix[i][j] != 0 && !visited[i][j]) {
                    cnt = 0;
                    dfs(i, j);
                    list.add(cnt);
                }
            }
        }
        
        if (list.isEmpty()) {
            return answer;
            
        } else {
            answer = list.stream().mapToInt(Integer::intValue).toArray();
            Arrays.sort(answer);
            return answer;
        }
    }
    
    public void dfs(int startY, int startX) {
        visited[startY][startX] = true;
        cnt += matrix[startY][startX];
        
        for (int i = 0; i < 4; i++) {
            int ny = startY + dy[i];
            int nx = startX + dx[i];
            
            if (0 <= ny && ny < y && 0 <= nx && nx < x) {
                if (matrix[ny][nx] != 0 && !visited[ny][nx]) {
                    dfs(ny, nx);
                }
            }
        }
    }
}
