import java.util.*;
import java.io.*;

public class Main {
	static int N, M;
	static int[][] map;
	static int min = Integer.MAX_VALUE;
	static boolean[] visited;
	static ArrayList<Node> houses;
	static ArrayList<Node> chickens;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N + 1][N + 1];
		houses = new ArrayList<>();
		chickens = new ArrayList<>();

		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 1)
					houses.add(new Node(i, j));
				if (map[i][j] == 2)
					chickens.add(new Node(i, j));
			}
		}

		visited = new boolean[chickens.size()];
		backTracking(0, 0);
		System.out.println(min);
	}

	private static void backTracking(int cnt, int idx) {
		// 치킨집 조합을 다 채웠으면
		// 각 치킨집마다 치킨 거리(최소 거리)를 구한다
		if (cnt == M) {
//			System.out.println("filled cnt.");
			int total = 0;
			for (int i = 0; i < houses.size(); i++) {
				int dis = Integer.MAX_VALUE;
				for (int j = 0; j < chickens.size(); j++) {
					// i번재 집부터 j번째 치킨집까지 거리 중 최소
					if (visited[j] == true) {
						int tmp = Math.abs(houses.get(i).x - chickens.get(j).x)
								+ Math.abs(houses.get(i).y - chickens.get(j).y);
						dis = Math.min(dis, tmp);
//						System.out.println("dis: " + dis);
					}
				}
				total += dis;
			}
			min = Math.min(total, min);
			return;
		}

		// 치킨집 개수만큼 순회(combination)
		for (int i = idx; i < chickens.size(); i++) {
//			System.out.println("Loop on");
			if (visited[i] == false) {
//				System.out.println("into the backTracking.");
				visited[i] = true;
				backTracking(cnt + 1, i + 1);
				visited[i] = false;
			}
		}
	}

	static class Node {
		int x;
		int y;
		int dis;

		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
}
