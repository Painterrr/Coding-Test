import java.util.*;
import java.io.*;

public class Main {
	static int N, K;
	static int[] parent;
	static int[] time;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		parent = new int[100001];
		time = new int[100001];
		
		bfs();
		
		Stack<Integer> stack = new Stack<Integer>();
		stack.push(K);
		int index = K;
		
		while(index != N) {
			stack.push(parent[index]);
			index = parent[index];
		}
		
		sb.append(time[K] - 1 + "\n");
		while(!stack.isEmpty()) {
			sb.append(stack.pop() + " ");
		}
		
		System.out.println(sb.toString());
	}
	
	
	private static void bfs() {
		Queue<Integer> q = new LinkedList<Integer>();
		
		q.offer(N);
		time[N] = 1;
		
		while(!q.isEmpty()) {
			int now = q.poll();
			
			if(now == K)
				return;
			
			for(int i = 0; i < 3; i++) {
				int next;
				
				if(i == 0) next = now - 1;
				else if(i == 1) next = now + 1;
				else next = now * 2;
				
				if(0 > next || next > 100000)
					continue;
				
				if(0 == time[next]) {
					q.offer(next);
					time[next] = time[now] + 1;
					parent[next] = now;
				}
			}
		}
	}
}
