import java.util.*;
import java.io.*;

public class Main {
	static int N, D, ans;
	static Node[] nodes;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int root = -1;
		N = Integer.parseInt(br.readLine());
		nodes = new Node[N + 1];
		
		
		for(int i = 0; i <= N; i++) {
			nodes[i] = new Node(i);
		}
		
		st = new StringTokenizer(br.readLine());
		for(int i = 0; i < N; i++) {
			int parent = Integer.parseInt(st.nextToken());
			if(parent == -1) {
				root = i;
				continue;
			}
			nodes[parent].child.add(nodes[i]);
		}
		
		D = Integer.parseInt(br.readLine());
		ans = 0;
		
		if(D != root) {
			deleteNode(root);
			dfs(root);
		}
		
		System.out.println(ans);
	}
	
	private static void dfs(int idx) {
		if(nodes[idx].child.size() == 0) {
			ans++;
			return;
		}
		
		for(Node now : nodes[idx].child) {
			dfs(now.idx);
		}
	}
	
	private static void deleteNode(int idx) {
		for(Node now : nodes[idx].child) {
			if(now.idx == D) {
				nodes[idx].child.remove(now);
				return;
			}
			deleteNode(now.idx);
		}
	}

	static class Node {
		int idx;
		ArrayList<Node> child = new ArrayList<>();

		public Node(int idx) {
			this.idx = idx;
		}
	}
}
