import java.util.*;
import java.io.*;

public class Main {
    static int[] roots;
    static int n, m;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        n = Integer.parseInt(br.readLine());
        m = Integer.parseInt(br.readLine());
        roots = new int[n + 1];
        int[] route = new int[m];

        for (int i = 1; i <= n; i++) {
            roots[i] = i;
        }

        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < n; j++) {
                if (Integer.parseInt(st.nextToken()) == 1) {
                    union(i + 1, j + 1);
                }
            }
        }

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < m; i++) {
            route[i] = Integer.parseInt(st.nextToken());
        }

        boolean canTravel = true;
        int start = find(route[0]);
        for (int i = 1; i < m; i++) {
            if (start != find(route[i])) {
                canTravel = false;
                break;
            }
        }

        if (canTravel) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static void union(int a, int b) {
        int A = find(a);
        int B = find(b);

        if (A < B)
            roots[B] = A;
        else
            roots[A] = B;
    }

    public static int find(int n) {
        if (roots[n] == n)
            return n;

        return roots[n] = find(roots[n]);
    }
}
