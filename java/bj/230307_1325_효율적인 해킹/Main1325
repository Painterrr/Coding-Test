import java.util.*;
import java.io.*;

public class Main {
	static int N, M;
	static Node[] map;
	static boolean[] visited;
	static int[] answer;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new Node[N + 1];
		
		for(int i = 1; i <= N; i++) {
			map[i] = new Node(i);
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());

			// a가 b를 신뢰한다 == b를 해킹하면 a도 해킹할 수 있다 == b에서 a로 갈 수 있다
			// map[b] == Node(b);
			// 이 안에 시작 인덱스를 지정한 from과 from에 연결된 Node()리스트 존재
			// from에 연결된 Node에는 그에 해당하는 from과 연결된 Node() 리스트존재
			// -> 사이클이 형성되고, 사이클의 순환을 막기 위해 visited로 체크
			map[b].to.add(map[a]);
		}

		answer = new int[N + 1];
		for (int i = 1; i <= N; i++) {
			visited = new boolean[N + 1];
			dfs(i, i);
		}

		// --------------------------------------
		int max = 0;
		for (int i = 1; i <= N; i++) {
			if (max < answer[i])
				max = answer[i];
		}

		for (int i = 1; i <= N; i++) {
			if (max == answer[i])
				bw.append(i + " ");
		}

		bw.flush();
		bw.close();
	}

	private static void dfs(int from, int now) {
		visited[from] = true;

		for(Node node : map[now].to) {
			if(!visited[node.from]) {
				visited[node.from] = true;
				dfs(from, node.from);
				answer[from]++;
			}
		}
	}
}

class Node {
	int from;
	ArrayList<Node> to;

	public Node(int from) {
		this.from = from;
		this.to = new ArrayList<>();
	}
}
