import java.io.*;
import java.util.*;

public class Main {
	static int[] arr;
	static int N, C;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());

		arr = new int[N];

		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}
		
		Arrays.sort(arr);
		
		findAnswer();
	}

	public static void findAnswer() {
		int answer = 0;
		int left = 0;
		int right = 1000000001;
		
		while(left <= right) {
			int mid = (left + right) / 2; // 현재 가정한 공유기 간 거리
			int cnt = 0; // 가정한 공유기 간 거리로 계산한 공유기 개수
			int pre = -1000000000;
			
			for (int i = 0; i < N; i++) {
				// 공유기 설치할 시작 인덱스
				// 이전 공유기 위치
				// arr[i] - pre >= mid
				// 이전 공유기와의 거리가 충분히 떨어져 있다.
				if (arr[i] - pre >= mid) {
					cnt++; // 공유기 설치
					pre = arr[i]; // 이전 공유기 위치 저장
				}
			}
			
			if (cnt >= C) {
				answer = Math.max(answer, mid);
				left = mid + 1;
			} else 
				right = mid - 1;			
		}
		
		System.out.println(answer);
		return;
	}
}
