import java.util.*;
import java.io.*;

public class Main1976 {
//여행계획을 그대로 따르는 것이 아닌
//'실행가능 여부' 판단
//도시마다 연결된 노드들을 하나의 루트 노드에 연결
//-> 같은 루트 노드에 연결된 도시 == 여행 가능
//이후 여행 계획을 하나씩 꺼내서 맨 앞 노드의 루트 노드와 비교
//같은 루트 노드를 공유하면 여행 가능 -> 계획 원소 순회 끝나고 'YES"
//공휴하지 않으면 여행 불가 -> 발견되면 바로 'NO'
	static int[] cities;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int N = Integer.parseInt(br.readLine());
		int M = Integer.parseInt(br.readLine());

		cities = new int[N + 1];
		for (int i = 1; i <= N; i++) {
			cities[i] = i;
		}

		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());

			for (int j = 1; j <= N; j++) {
				int city = Integer.parseInt(st.nextToken());
				if (city == 1)
					union(i, j);
			}
		}

		st = new StringTokenizer(br.readLine());
		int fst = Integer.parseInt(st.nextToken());
		for (int i = 1; i < M; i++) {
			int another = Integer.parseInt(st.nextToken());
			if (find(fst) != find(another)) {
				System.out.println("NO");
				return;
			}
		}

		System.out.println("YES");

	}

	private static int find(int num) {
		if (cities[num] == num)
			return num;
		return cities[num] = find(cities[num]);
	}

	private static void union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);

		if (aRoot < bRoot)
			cities[bRoot] = aRoot;
		else if (aRoot > bRoot)
			cities[aRoot] = bRoot;
	}
}
