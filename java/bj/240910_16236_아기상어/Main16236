import java.io.*;
import java.util.*;

public class Main {
    static int n;
    static int[][] matrix;
    static int[] sharkPos;
    static int sharkSize;
    static int eatenCnt;
    static int ans;

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        matrix = new int[n][n];
        sharkPos = new int[2];
        sharkSize = 2;
        eatenCnt = 0;
        ans = 0;

        for (int i = 0; i < n; i++) {
            String[] input = br.readLine().split(" ");

            for (int j = 0; j < n; j++) {
                matrix[i][j] = Integer.parseInt(input[j]);

                if (matrix[i][j] == 9) {
                    sharkPos[0] = i;
                    sharkPos[1] = j;
                    matrix[i][j] = 0;
                }
            }
        }

        while(true) {
            int[] toGo = find();

            if (toGo[0] == -1 && toGo[1] == -1)
                break;

            move(toGo);
            ans += toGo[2];
        }

        System.out.println(ans);
    }

    public static void move(int[] toGo) {
        matrix[toGo[0]][toGo[1]] = 0;
        sharkPos[0] = toGo[0];
        sharkPos[1] = toGo[1];
        eatenCnt++;

        if (eatenCnt == sharkSize) {
            eatenCnt = 0;
            sharkSize++;
        }
    }

    public static int[] find() { // shark >=
        int[] dx = {-1, 0, 0, 1};
        int[] dy = {0, -1, 1, 0};
        Queue<int[]> q = new ArrayDeque<>();
        boolean[][] visited = new boolean[n][n];
        ArrayList<int[]> fishList = new ArrayList<>();
        int minDist = Integer.MAX_VALUE;

        q.add(new int[] {sharkPos[0], sharkPos[1], 0});
        visited[sharkPos[0]][sharkPos[1]] = true;

        while (!q.isEmpty()) {
            int[] now = q.poll();
            int x = now[0];
            int y = now[1];
            int dist = now[2];

            if (dist > minDist)
                continue;

            if (0 < matrix[x][y] && matrix[x][y] < sharkSize) {
                minDist = dist;
                fishList.add(new int[] {x, y, dist});
            }

            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];

                if (0 <= nx && nx < n && 0 <= ny && ny < n) {
                    if (sharkSize >= matrix[nx][ny] && !visited[nx][ny]) {
                        q.add(new int[]{nx, ny, dist + 1});
                        visited[nx][ny] = true;
                    }
                }
            }
        }

        if (!fishList.isEmpty()) {
            fishList.sort((a, b) -> {
                if (a[2] == b[2]) {
                    if (a[0] == b[0])
                        return a[1] - b[1];
                    else
                        return a[0] - b[0];
                } else
                    return a[2] - b[2];
            });

            return fishList.get(0);
        }

        return new int[] {-1, -1, 0};
    }
}

