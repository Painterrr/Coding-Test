import java.util.*;
import java.io.*;

public class Main {
	static int N, M;
	static int[][] map;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		int R = Integer.parseInt(st.nextToken());

		map = new int[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i = 0; i < R; i++) {
			turnMap();
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				bw.append(map[i][j] + " ");
			}
			bw.append("\n");
		}

		bw.flush();
		bw.close();
		br.close();
	}

	private static void turnMap() {
		int cnt = Math.min(N, M) / 2; // 돌려야 할 벨트의 개수
		int[] dx = { 0, 1, 0, -1 };
		int[] dy = { 1, 0, -1, 0 };

		// map 내 벨트 개수만큼 돌린다
		for (int i = 0; i < cnt; i++) {
			int x = i;
			int y = i;

			int start = map[x][y];
			int idx = 0;

			while (idx < 4) {
				int X = x + dx[idx];
				int Y = y + dy[idx];

				// i == 현재 속한 벨트
				if (X >= i && Y >= i && X < N - i && Y < M - i) {
					map[x][y] = map[X][Y];
					x = X;
					y = Y;
				} else {
					idx++;
				}
			}

			map[i + 1][i] = start;
		}
	}
}
