import java.util.*;
import java.io.*;

public class Main {
	static int min = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());

		if (N > K)
			min = N - K;
		else
			bfs(N, K);

		System.out.println(min);
	}

	private static void bfs(int N, int K) {
		Queue<Point> q = new LinkedList<>();
		boolean[] visited = new boolean[100001];
		int time = 0;

		q.offer(new Point(N, time));

		while (!q.isEmpty()) {
			Point now = q.poll();
			visited[now.idx] = true;

			if (now.idx == K) {
				min = Math.min(min, now.time);
			}

			int prod = now.idx * 2;
			int minus = now.idx - 1;
			int plus = now.idx + 1;

			if (prod <= 100000 && !visited[prod]) {
				q.offer(new Point(prod, now.time));
				visited[prod] = true;
			}

			if (0 <= minus && !visited[minus]) {
				q.offer(new Point(minus, now.time + 1));
				visited[minus] = true;
			}

			if (plus <= 100000 && !visited[plus]) {
				q.offer(new Point(plus, now.time + 1));
				visited[plus] = true;
			}
		}
	}

	static class Point {
		int idx;
		int time;

		public Point(int idx, int time) {
			this.idx = idx;
			this.time = time;
		}
	}
}
